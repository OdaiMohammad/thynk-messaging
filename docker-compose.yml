version: "3.9"

services:
  thynk-zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: thynk-zookeeper
    restart: always
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - thynk

  thynk-kafka:
    image: confluentinc/cp-kafka:latest
    container_name: thynk-kafka
    restart: always
    hostname: kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9991:9991"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:19092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:19092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_MESSAGE_MAX_BYTES: 15728640
      KAFKA_REPLICA_FETCH_MAX_BYTES: 15728640
    depends_on:
      - thynk-zookeeper
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - thynk

  thynk-schema-registry:
    image: confluentinc/cp-schema-registry:latest
    container_name: thynk-schema-registry
    restart: always
    depends_on:
      - thynk-zookeeper
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: localhost
      SCHEMA_REGISTRY_LISTENERS: "http://localhost:8085"
    ports:
      - 8085:8085
    networks:
      - thynk

  thynk-kafka-connect:
    image: confluentinc/cp-kafka-connect:latest
    container_name: thynk-kafka-connect
    restart: always
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka:19092"
      CONNECT_REST_PORT: 28082
      CONNECT_GROUP_ID: "connect-cluster"
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-cluster-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-cluster-offset"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-cluster-status"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema:8085"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema:8085"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_PLUGIN_PATH: /usr/share/java,/etc/kafka-connect/jars
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: brave.kafka.interceptor.TracingProducerInterceptor
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: brave.kafka.interceptor.TracingConsumerInterceptor
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: All
      CONNECT_PRODUCER_BUFFER_MEMORY: 15728640
      CONNECT_PRODUCER_MESSAGE_MAX_SIZE: 15728640
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 15728640
    ports:
      - 8083:8083
      - 28082:28082
    volumes:
      - $PWD/kafka-connect-jars:/etc/kafka-connect/jars
    networks:
      - thynk
      - hosting

  thynk-kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: thynk-kafdrop
    restart: always
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: "kafka:19092"
    depends_on:
      - thynk-kafka
    networks:
      - thynk

  thynk-prioritizor:
    build: thynk-requests-prioritizor/.
    image: thynk-requests-prioritizor:latest
    container_name: thynk-prioritizor
    restart: always
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:19092"
      SPRING_APPLICATION_NAME: "thynk-request-prioritizor"
      SPRING_ZIPKIN_BASE_URL: "http://thynk-zipkin:9411"
      SPRING_BOOT_ADMIN_CLIENT_URL: "http://spring-boot-admin:8080"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "*"
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      SPRING_KAFKA_CONSUMER_PROPERTIES_MAX_PARTITION_FETCH_BYTES: 15728640
      SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_REQUEST_SIZE: 15728640
    depends_on:
      - thynk-kafka
    networks:
      - thynk

  thynk-executor:
    build: thynk-requests-executor/.
    image: thynk-requests-executor:latest
    container_name: thynk-vip-executor-1
    restart: always
    environment:
      SPRING_DATA_MONGODB_URI: "mongodb://sa:password@mongo:27017"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: "kafka:19092"
      SPRING_KAFKA_CONSUMER_GROUP-ID: "thynk-request-consumers"
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESTE: "earliest"
      SPRING_KAFKA_CONSUMER_ENABLE_AUTO_COMMIT: "false"
      SPRING_KAFKA_CONSUMER_MAX_POLL_RECORDS: 1
      THYNK_REQUEST_TARGET_PRIORITY: 1
      SPRING_KAFKA_LISTENER_IDLE_EVENT_INTERVAL: 5000
      SPRING_KAFKA_LISTENER_ACK_MODE: "manual_immediate"
      SPRING_KAFKA_PRODUCER_KEY_SERIALIZER: "org.apache.kafka.common.serialization.StringSerializer"
      SPRING_KAFKA_PRODUCER_VALUE_SERIALIZER: "org.springframework.kafka.support.serializer.JsonSerializer"
      SPRING_DATA_MONGODB_DATABSE: "thynk"
      SPRING_APPLICATION_NAME: "thynk-vip-executor-1"
      SPRING_ZIPKIN_BASE_URL: "http://thynk-zipkin:9411"
      SPRING_KAFKA_CONSUMER_PROPERTIES_PARTITION_ASSIGNMENT_STRATEGY: org.apache.kafka.clients.consumer.RoundRobinAssignor
      RULES_ENGIN_SERVICE_URL: http://dev-www.santechture.com:7777/RulesEngine/AccumedValidator
      SPRING_BOOT_ADMIN_CLIENT_URL: "http://spring-boot-admin:8080"
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: "*"
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: always
      SPRING_KAFKA_CONSUMER_PROPERTIES_MAX_PARTITION_FETCH_BYTES: 15728640
      SPRING_KAFKA_PRODUCER_PROPERTIES_MAX_REQUEST_SIZE: 15728640
    depends_on:
      - thynk-kafka
    networks:
      - thynk
      - hosting

  thynk-zipkin:
    image: openzipkin/zipkin
    container_name: thynk-zipkin
    restart: always
    ports:
      - "9411:9411"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - thynk

volumes:
  zookeeper_data:
    name: thynk_zookeeper_data
  zookeeper_log:
    name: thynk_zookeeper_log
  kafka_data:
    name: thynk_kafka_data

networks:
  thynk:
    name: thynk
  hosting:
    name: hosting
    external: true
